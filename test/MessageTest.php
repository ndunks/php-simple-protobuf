<?php

/**
* @group msg
*/

use kc\proto\serializer\native\Reader;

class MessageTest extends PHPUnit\Framework\TestCase
{
	function testCallable()	
	{
		include_once 'out/autoload.php';
		/**
		* 
		*/
		$obj = new MyTestMessage();
		$obj->addAge(10);
		$this->assertEquals(10, $obj->getAge());
		$obj->clearAge();

		$obj->setName('user');
		$obj->setAddress('Indonesia');
		$obj->setAge(25);
		$json_str	= $obj->toJson(true);

		$json = json_decode( $json_str, true);
		$this->assertEquals('user', $json['name']);
		$this->assertEquals(25, $json['age']);

		$this->assertTrue($obj->hasName());
		$this->assertTrue($obj->hasAge());

		$obj->addAge(10);
		$this->assertEquals(35, $obj->getAge());
		$obj->addName('XX');
		$this->assertEquals('userXX', $obj->getName());
		$obj->clearAddress();
		$this->assertEquals(null, $obj->getAddress());
	}

	function testNamespaced()
	{
		include_once 'out/autoload.php';
		$obj = new \namespaced\Simple();
		$this->assertEquals(\namespaced\Simple::FIELDS, $obj->getProtoFields());

		$obj->setName('user');
		$obj->setAddress('Indonesia');
		$obj->setAge(25);
		$obj->setMale(true);

		$json_str	= $obj->toJson(true);

		$json = json_decode( $json_str, true);
		$this->assertEquals('user', $json['name']);
		$this->assertEquals(25, $json['age']);

		$new = new namespaced\Simple($json_str);
		$this->assertEquals($new->getName(), $obj->getName());
		$this->assertEquals($new->getAddress(), $obj->getAddress());
		$this->assertEquals($new->getAge(), $obj->getAge());

		//Nested
	}

	function testJsonSimple()
	{
		include_once 'out/autoload.php';
		$obj = new Simple();
		$this->assertEquals(Simple::FIELDS, $obj->getProtoFields());

		$obj->setName('user');
		$obj->setAddress('Indonesia');
		$obj->setAge(25);

		$json_str	= $obj->toJson(true);

		$json = json_decode( $json_str, true);
		$this->assertEquals('user', $json['name']);
		$this->assertEquals(25, $json['age']);

		$new = new Simple($json_str);
		$this->assertEquals($new->getName(), $obj->getName());
		$this->assertEquals($new->getAddress(), $obj->getAddress());
		$this->assertEquals($new->getAge(), $obj->getAge());

		//Nested
	}

	function testJsonNested()
	{
		include_once 'out/autoload.php';
		//TEST 1
		$obj = new \nested\Man();
		$childs = [];
		for($i = 0; $i < 4; $i++)
		{
			$child = new \nested\Man\Child();
			$child->setName("Child At $i");
			$child->setAge(10+$i);
			$childs[]	= $child;
		}
		$obj->setChild($childs);
		$obj->setName('user');
		$obj->setAge(25);
		$obj->setWife(\nested\Man\Wife::ANA);
		$json_str	= $obj->toJson(true);
		$json		= json_decode($json_str, true);
		$this->assertEquals('user', $json['name']);
		$this->assertEquals(25, $json['age']);

		$new = new \nested\Man($json_str);
		$this->assertEquals($new->getChild(), $obj->getChild());
		$this->assertEquals($new->getName(), $obj->getName());
		$this->assertEquals($new->getWife(), $obj->getWife());
		$this->assertEquals($new->getAge(), $obj->getAge());


		//TEST 2
		$obj = new nested\Man();
		$obj->setName('user2');
		$obj->setAge(18);
		$obj->setWife(\nested\Man\Wife::CHIZ);

		$json_str	= $obj->toJson(true);
		$json		= json_decode($json_str, true);

		$new = new \nested\Man($json_str);
		$this->assertEquals($new->getName(), $obj->getName());
		$this->assertEquals($new->getWife(), $obj->getWife());
		$this->assertEquals($new->getAge(), $obj->getAge());

	}

	function testNativeSimple()
	{
		include_once 'out/autoload.php';
		$file= __DIR__ . '/corection/simple_1.proto3.bin';
		$new = new Simple( Reader::fromFile($file) );

		$this->assertEquals( 'user', $new->getName() );
		$this->assertEquals( 'Indonesia', $new->getAddress() );
		$this->assertEquals( 25, $new->getAge() );

		$obj = new Simple();
		$obj->setName('user');
		$obj->setAddress('Indonesia');
		$obj->setAge(25);

		$this->assertEquals($new->getName(), $obj->getName());
		$this->assertEquals($new->getAddress(), $obj->getAddress());
		$this->assertEquals($new->getAge(), $obj->getAge());

		//Compare with protobuf 3 generated by java
		$this->assertEquals(file_get_contents($file), $obj->toString());

	}

	function testNativeNested()
	{
		include_once 'out/autoload.php';
		$file= __DIR__ . '/corection/nested_1.proto3.bin';
		$childs = [];
		for($i = 0; $i < 4; $i++)
		{
			$child = new nested\Man\Child();
			$child->setName("Child At $i");
			$child->setAge(10+$i);
			$childs[]	= $child;
		}

		$new = new nested\Man( Reader::fromFile($file) );
		
		$this->assertEquals( 'user', $new->getName() );
		$this->assertEquals( 25, $new->getAge() );
		$this->assertEquals( nested\Man\Wife::ANA, $new->getWife() );
		$this->assertEquals( $childs, $new->getChild() );


		//Compare with protobuf 3 generated by java
		$obj = new nested\Man();
		$obj->setChild($childs);
		$obj->setName('user');
		$obj->setAge(25);
		$obj->setWife(nested\Man\Wife::ANA);

		$bin	= $obj->toString();
		$json	= $obj->toJson(true);

		file_put_contents(__DIR__ . '/result/nested_1.bin', $bin);
		file_put_contents(__DIR__ . '/result/nested_1.json', $json);

		//TEST 2
		$file= __DIR__ . '/corection/nested_2.proto3.bin';
		$new = new nested\Man( Reader::fromFile($file) );
		$obj = new nested\Man();
		$obj->setName('user2');
		$obj->setAge(18);
		$obj->setWife(nested\Man\Wife::CHIZ);

		$bin	= $obj->toString();
		$json	= $obj->toJson(true);

		file_put_contents(__DIR__ . '/result/nested_2.bin', $bin);
		file_put_contents(__DIR__ . '/result/nested_2.json', $json);
	}

	function testNativePacked()
	{
		include_once 'out/autoload.php';
		$file= __DIR__ . '/corection/packed_1.proto3.bin';
		$new = new Packed( Reader::fromFile($file) );
		$numbers = [3,4,54,343,45,-124,343,-993433,23];
		$this->assertEquals( 'user', $new->getName() );
		$this->assertEquals( 25, $new->getAge() );
		
		$this->assertEquals( $numbers, $new->getNumbers() );

		$obj = new Packed();
		$obj->setName('user');
		$obj->setAge(25);
		$obj->setNumbers($numbers);
		$bin	= $obj->toString();
		file_put_contents(__DIR__ . '/result/packed_1.bin', $bin);
		//Compare with protobuf 3 generated by java
		$this->assertEquals(file_get_contents($file), $bin);

	}

	function testNativeExport()
	{
		include_once 'out/autoload.php';
		$obj = new Simple();
		$obj->setName('user');
		$obj->setAddress('Indonesia');
		$obj->setAge(25);

		$file= __DIR__ . '/corection/simple_1.proto3.bin';
		$corection = file_get_contents($file);
		$this->assertEquals($corection, $obj->toString());
	}

	function testSimpleGroup()
	{
		include_once 'out/autoload.php';
		$file= __DIR__ . '/corection/simple_group.bin';
		$child	= new SimpleGroup\Child();
		$child->setUrl("ABC");

		$new = new SimpleGroup( Reader::fromFile($file) );
		$this->assertEquals( $child, $new->getChild() );
		$this->assertEquals( $child->getUrl(), $new->getChild()->getUrl() );

		
		$obj	= new SimpleGroup();
        $obj->setChild($child);
        $bin	= $obj->toString();
        file_put_contents(__DIR__ . '/result/simple_group.bin', $bin);
        //Compare with protobuf generated by java
		$this->assertEquals(file_get_contents($file), $bin);
	}

	function testNativeGroup()
	{
		include_once 'out/autoload.php';
		$file= __DIR__ . '/corection/group.bin';
		$results= [];
		$info	= new Group\Result\Info();

		for($i = 1; $i < 5; $i++)
        {
            $info->setTitle("TITLE " . $i);
            if($i % 2 == 0)
                $info->setDate($i . "2/23/23");
            else $info->clearDate();

            $result = new Group\Result();
            $result->setUrl("HTTP://URL_" . $i );
            $result->setCount(100*$i%40);
            $result->setInfo($info);
            $results[]	= $result;
        }
        $enums = [];
        for($a = 0; $a < 10; $a++)
        {
            $enums[] = ( $a % 2== 0 ? Group\Enum::A : Group\Enum::C);
        }

		$new	= new Group( Reader::fromFile($file) );
		
        $obj	= new Group();
        $obj->setName("Group 001");
        $obj->setResult($results);
        $obj->setEnum($enums);

        $this->assertEquals( $obj->getName(), $new->getName() );
		$this->assertEquals( $obj->getEnum(), $new->getEnum() );
		$this->assertEquals( $obj->getResult(), $new->getResult() );

        $bin	= $obj->toString();

        file_put_contents($file, $bin);
        //Compare with protobuf generated by java
		$this->assertEquals(file_get_contents($file), $bin);

	}

	function testUnknownField()
	{
		include_once 'out/autoload.php';
		$file= __DIR__ . '/corection/simple_1.proto3.bin';
		$new = new SimpleGroup( Reader::fromFile($file) );
		
		$this->assertEquals([1 => 'user',
							2 => 'Indonesia',
							3 => 25],  $new->__getUnknown());

		$file= __DIR__ . '/corection/group.bin';
		$new = new SimpleGroup( Reader::fromFile($file) );
		
		$this->assertEquals('Group 001',  $new->__getUnknown()[1]);

		$file= __DIR__ . '/corection/nested_1.proto3.bin';
		$new = new \kc\proto\Unknown( Reader::fromFile($file) );
		$this->assertEquals('user',  $new->__getUnknown()[1]);
		file_put_contents(__DIR__ . '/result/unknown_field.json', $new->toJson(true));
	}

	function testEmptyChildMessage()
	{
		$my		= new MyTestMessage();
		$child	= new MyTestMessage();
		$my->setChild($child);
		//deactivate pretty print
		\kc\proto\serializer\Json::$JSON_OPTION = 0;
		$json	= $my->toJson(false);
		$raw	= $my->toString();
		$this->assertEquals( '{"child":{}}', $json );
		$new	= new MyTestMessage($json);
		$new2	= new MyTestMessage($raw);
		$this->assertEquals( '{"child":{}}', $new->toJson() );
		$this->assertEquals( '{"child":{}}', $new2->toJson() );

		$this->assertEquals( $raw, $new->toString() );
		$this->assertEquals( $raw, $new2->toString() );

		var_dump($my, $new, $new2);
		print_r($my->toArray());
	}

}
class MyTestMessage extends \kc\proto\Message
{
	var $name;
	var $address;
	var $age;
	var $child;

	const FIELDS	= [
		1 => [ 'name',	self::TYPE_STRING,	self::RULE_OPTIONAL,	false,	'string'],
		2 => [ 'address',	self::TYPE_STRING,	self::RULE_OPTIONAL,	false,	'string'],
		3 => [ 'age',	self::TYPE_INT32,	self::RULE_OPTIONAL,	false,	'int'],
		3 => [ 'child',	self::TYPE_MESSAGE,	self::RULE_OPTIONAL,	false,	'MyTestMessage'],
	];
}